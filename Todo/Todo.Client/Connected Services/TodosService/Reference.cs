//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Todo.Client.Connected_Services.TodosService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TodosService.ITodoService")]
    public interface ITodoService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetTodo", ReplyAction="http://tempuri.org/ITodoService/GetTodoResponse")]
        Todo.Core.Domain.Todo GetTodo(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetTodo", ReplyAction="http://tempuri.org/ITodoService/GetTodoResponse")]
        System.Threading.Tasks.Task<Todo.Core.Domain.Todo> GetTodoAsync(System.Guid id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetAllTodos", ReplyAction="http://tempuri.org/ITodoService/GetAllTodosResponse")]
        Todo.Core.Domain.Todo[] GetAllTodos();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetAllTodos", ReplyAction="http://tempuri.org/ITodoService/GetAllTodosResponse")]
        System.Threading.Tasks.Task<Todo.Core.Domain.Todo[]> GetAllTodosAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetPendingTodos", ReplyAction="http://tempuri.org/ITodoService/GetPendingTodosResponse")]
        Todo.Core.Domain.Todo[] GetPendingTodos(bool pendingOnly);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITodoService/GetPendingTodos", ReplyAction="http://tempuri.org/ITodoService/GetPendingTodosResponse")]
        System.Threading.Tasks.Task<Todo.Core.Domain.Todo[]> GetPendingTodosAsync(bool pendingOnly);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITodoServiceChannel : ITodoService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TodoServiceClient : System.ServiceModel.ClientBase<ITodoService>, ITodoService {
        
        public TodoServiceClient() {
        }
        
        public TodoServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TodoServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TodoServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TodoServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Todo.Core.Domain.Todo GetTodo(System.Guid id) {
            return base.Channel.GetTodo(id);
        }
        
        public System.Threading.Tasks.Task<Todo.Core.Domain.Todo> GetTodoAsync(System.Guid id) {
            return base.Channel.GetTodoAsync(id);
        }
        
        public Todo.Core.Domain.Todo[] GetAllTodos() {
            return base.Channel.GetAllTodos();
        }
        
        public System.Threading.Tasks.Task<Todo.Core.Domain.Todo[]> GetAllTodosAsync() {
            return base.Channel.GetAllTodosAsync();
        }
        
        public Todo.Core.Domain.Todo[] GetPendingTodos(bool pendingOnly) {
            return base.Channel.GetPendingTodos(pendingOnly);
        }
        
        public System.Threading.Tasks.Task<Todo.Core.Domain.Todo[]> GetPendingTodosAsync(bool pendingOnly) {
            return base.Channel.GetPendingTodosAsync(pendingOnly);
        }
    }
}
